apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {

    maven {
        url "https://dl.bintray.com/kinfoundation/go-ethereum"
    }
    maven {
        url 'https://jitpack.io'
    }
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.kinkong"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 2
        versionName "0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        splits {

            // Configures multiple APKs based on ABI.
            abi {

                // Enables building multiple APKs per ABI.
                enable true

                // By default all ABIs are included, so use reset() and include to specify that we only
                // want APKs for x86, armeabi-v7a, and mips.

                // Resets the list of ABIs that Gradle should create APKs for to none.
                reset()

                // Specifies a list of ABIs that Gradle should create APKs for.
                include "x86", "armeabi-v7a", "mips"

                // Specifies that we do not want to also generate a universal APK that includes all ABIs.
                universalApk false
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}


// map for the version code that gives each ABI a value. make sure to list all ABIs mentioned in splits block, an keep the order.
ext.versionCodes = ['armeabi-v7a': 4,'mips': 5, 'x86': 6]
import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ABI APK value * 1000 + defaultConfig.versionCode
android.applicationVariants.all { variant ->
    // assign different version code for each output
    variant.outputs.each { output ->
        output.versionCodeOverride = project.ext.versionCodes.get(output.getFilter(OutputFile.ABI)) * 1000 + android.defaultConfig.versionCode
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile 'kinfoundation.ethereum:geth:1.0.2@aar'
    compile 'com.github.kinfoundation:kin-sdk-core-android:37ad46e'
    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    implementation 'com.google.firebase:firebase-core:11.6.2'
    implementation 'com.google.firebase:firebase-storage:11.6.2'
    implementation 'com.google.firebase:firebase-auth:11.6.2'
    implementation 'com.google.firebase:firebase-database:11.6.2'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
}



apply plugin: 'com.google.gms.google-services'